#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_7_2-3-gee82a7 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="arial",fontsize=10,labelfontname="arial",labelfontsize=10];
	node [fontname="arial",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// org.edg.data.replication.optorsim.infrastructure.BinaryTree
	c2887 [label=<<table title="org.edg.data.replication.optorsim.infrastructure.BinaryTree" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./BinaryTree.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> BinaryTree </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - root : BinaryTree.Node </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> - doInsert(v1 : int, v2 : int, codeOp : int, n : BinaryTree.Node) : BinaryTree.Node </td></tr>
<tr><td align="left" balign="left"> - doSearchNode(key : int, n : BinaryTree.Node) : BinaryTree.Node </td></tr>
<tr><td align="left" balign="left"> - doSearchPosition(key : int, n : BinaryTree.Node) : int </td></tr>
<tr><td align="left" balign="left"> - doMakeRanking(n1 : BinaryTree.Node, n2 : BinaryTree) </td></tr>
<tr><td align="left" balign="left"> - doComputeDistance(n1 : BinaryTree.Node, n2 : BinaryTree, c : NodeCounter) </td></tr>
<tr><td align="left" balign="left"> - doIntoArray(n : BinaryTree.Node, a : int[], c : NodeCounter) </td></tr>
<tr><td align="left" balign="left"> + searchNode(key : int) : BinaryTree.Node </td></tr>
<tr><td align="left" balign="left"> + searchPosition(key : int) : int </td></tr>
<tr><td align="left" balign="left"> + getFromHistory(v1 : int, v2 : int, codeOp : int) </td></tr>
<tr><td align="left" balign="left"> + makeRanking(root1 : BinaryTree) </td></tr>
<tr><td align="left" balign="left"> + computeDistance(root1 : BinaryTree, c : NodeCounter) </td></tr>
<tr><td align="left" balign="left"> + computeDistance(root1 : BinaryTree) : int </td></tr>
<tr><td align="left" balign="left"> + intoArray(a : int[]) </td></tr>
<tr><td align="left" balign="left"> + estimateFutureValueZipf(fileId : int, accessHistory : TreeMap&lt;&gt;) : double </td></tr>
<tr><td align="left" balign="left"> - searchFileId(rankingS : int[], fileId : int, t : BinaryTree) : int </td></tr>
		</table></td></tr>
		</table>>, URL="./BinaryTree.html", fontname="arial", fontcolor="black", fontsize=10.0];
}

